<h3 class="center"><%= @state.name %></h3>

<div class="row">
  <div class="col s12 m4">
    <div class="card-panel grey lighten-5 hoverable">
      <h5 class="center teal-text text-darken-4">Basic IRS Data</h5>
      <h6>No. of Returns: <span class="right"><%= number_with_delimiter(@state.n1) %></h6>
      <h6>Percent Single: <span class="right"><%= @state.percent_single %>%</span></h6>
      <h6>Percent Joint File: <span class="right"><%= @state.percent_joint %>%</span></h6>
      <h6>Percent HOH: <span class="right"><%= @state.percent_hoh %>%</span></h6>
      <h6>Percent Paid Prep: <span class="right"><%= @state.percent_paid_prep %>%</span></h6>
      <h6>Avg No. Dependents: <span class="right"><%= @state.average_dependents %></span></h6>
      <h6>Percent Elderly: <span class="right"><%= @state.percent_elderly %>%</span></h6>
      <h6>Avg Income: <span class="right"><%= number_to_currency(@state.mean_income, precision: 0) %></span></h6>
    </div>
  </div>
  <div class="col s12 m4">
    <div class="card-panel grey lighten-5 hoverable">
      <h5 class="center teal-text text-darken-4">Highest Incomes:</h5>
      <ol>
        <% @state.high_incomes.each do |zip| %>
        <li><%= link_to zip.code, zip_path(zip) %>: <span class="right"><%= number_to_currency(zip.mean_income, precision: 0) %></span></li>
        <% end %>
      </ol>
    </div>
  </div>
  <div class="col s12 m4">
    <div class="card-panel grey lighten-5 hoverable">
      <h5 class="center teal-text text-darken-4">Lowest Incomes:</h5>
      <ol>
        <% @state.low_incomes.each do |zip| %>
        <li><%= link_to zip.code, zip_path(zip) %>: <span class="right"><%= number_to_currency(zip.mean_income, precision: 0) %></span></li>
        <% end %>
      </ol>
    </div>
  </div>
</div>

<div id="map"></div>

<h5 class="center">Zip Codes in <%= @state.name %></h5>
<% @state.zips.each do |zip| %>
  <%= link_to zip.code, zip_path(zip) %>
<% end %>

<% if @state.lat %>
<script>
  function initMap() {
    var options = {
      zoom: 7,
      center: {lat: <%= @state.lat %>, lng: <%= @state.lng %>}
    }
    var map = new google.maps.Map(document.querySelector('#map'), options);
    var bounds = {
      north: <%= @state.ne_lat %>,
      south: <%= @state.sw_lat %>,
      east: <%= @state.ne_lng %>,
      west: <%= @state.sw_lng %>
    }
    map.fitBounds(bounds, -10)

    var geocoder = new google.maps.Geocoder;
    var infoWindow = new google.maps.InfoWindow;

    google.maps.event.addListener(map, 'click',
    function(event){
      var latLng = event.latLng
      console.log(JSON.stringify(latLng));
      geocoder.geocode({'location':latLng}, function(results, status) {
        if (status === 'OK') {
          if (results[0]) {
            var marker = new google.maps.Marker({
              position: latLng,
              map: map
            });
            console.log(JSON.stringify(results[0].address_components))
            var message = setAddressMessage(results[0].address_components)
            console.log(message)
            infoWindow.setContent(message);
            infoWindow.open(map, marker);
          } else {
            window.alert('No results found');
          }
        } else {
          window.alert('Geocoder failed due to: ' + status);
        }
      });
    });
  } // end of init map

  function setAddressMessage(components) {
    console.log(components.length);
    var zip = "";
    var county = "";
    var state = "";
    components.forEach(function(component) {
      if(component["types"].includes("postal_code")) {
        zip = component["short_name"];
      };
      if(component["types"].includes("administrative_area_level_2")) {
        county = component["short_name"];
      };
      if(component["types"].includes("administrative_area_level_1")) {
        state = component["long_name"];
      };
    });
    return `<h6><a href="/zips/${zip}">${zip}</a></h6><p>${county}</p><p>${state}</p>`;
  } // end of setAddressMessage

</script>

<%= javascript_include_tag "https://maps.googleapis.com/maps/api/js?key=#{Rails.application.credentials.google[:api_key]}&callback=initMap", async: true, defer: true %>
<% end %>
